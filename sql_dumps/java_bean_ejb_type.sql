INSERT INTO java_bean.ejb_type (id, name, description) VALUES (1, 'Entity Bean', 'Entity bean представляет собой компоненту, работающую с постоянной (persistent) информацией, хранящейся, например, в базе данных. Entity beans ассоциируются с элементами баз данных и могут быть доступны одновременно нескольким пользователям. Так как информация в базе данных является постоянной, то и entity beans живут постоянно, выживая, тем самым, после сбоев сервера (когда сервер восстанавливается после сбоя, он может восстановить бин из базы данных).');
INSERT INTO java_bean.ejb_type (id, name, description) VALUES (2, 'Message-Driven Bean', 'Message-Driven Beans (MDB). 
MDB работает в кооперации с системой сообщений JAVA [Java Messaging System](JMS), которая является абстрактным API для системы Message-Oriented Middleware (MOM), более-менее похожую на то, как JDBC является абстрактным API поверх SQL базы данных.
Коротко, система MOM предоставляет модель сообщений с публичной подпиской, основанной на асинхронной, распределенной очереди сообщений. 
MDB обычно реализуются для выполнения некоторых действий при получении сообщений и выступают в роли объектно-ориентированных точек соединения между подсистемами, взаимодействующих посредством JMS.
Отличие MDB от session beans и entity beans состоит в том, что они не предоставляют никаких удаленных или локальных представлений. Другими словами, клиентский код не может получить доступ к MDB, но MDB может использовать другие EJB и другие службы.');
INSERT INTO java_bean.ejb_type (id, name, description) VALUES (3, 'Session Bean', 'Session bean представляет собой EJB-компоненту, связанную с одним клиентом. Бины этого типа, как правило, имеют ограниченный срок жизни (хотя это и не обязательно), и редко участвуют в транзакциях. В частности, они обычно не восстанавливаются после сбоя сервера. В качестве примера session bean можно взять бин, который живет в веб-сервере и динамически создает HTML-страницы клиенту, при этом следя за тем, какая именно страница загружена у клиента. Когда же пользователь покидает вэб-узел, или по истечении некоторого времени, session bean уничтожается. Несмотря на то, что в процессе своей работы, session bean мог сохранять некоторую информацию в базе данных, его предназачение заключается все-таки не в отображении состояния или в работе с вечными объектами, а просто в выполнении некоторых функций на стороне сервера от имени одного клиента.
Session beans получаются в двух разных вариантах: 
 * session beans не имеющий состояний (Stateless session beans - SLSB);
 * session beans поддерживающие состояния (Stateful session beans - SFSB).');